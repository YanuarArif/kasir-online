// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- Authentication Models ---

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String? // HASHED password!
  provider      String?   @default("credentials")
  role          String?   @default("user") // Consider Enum Role
  token         String?   @unique
  accounts      Account[]
  sessions      Session[]

  // --- User's Own Data ---
  products   Product[] // User's products
  categories Category[] // User's categories
  suppliers  Supplier[] // User's suppliers
  customers  Customer[] // User's customers
  sales      Sale[] // Sales recorded by this user
  purchases  Purchase[] // Purchases recorded by this user

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model VerificationToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())

  @@unique([email, token])
  @@map("verification_tokens")
}

// --- Business Logic Models (Scoped per User) ---

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  sku         String? // Stock Keeping Unit - Made unique *per user* below
  price       Decimal  @db.Decimal(10, 2)
  cost        Decimal? @db.Decimal(10, 2)
  stock       Int      @default(0)
  image       String? // URL to the product image stored in Vercel Blob
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  userId        String // Foreign key to User
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade) // Relation to User
  saleItems     SaleItem[]
  purchaseItems PurchaseItem[]
  categoryId    String? // Foreign key for Category
  category      Category?      @relation(fields: [categoryId], references: [id]) // Relation to Category

  @@unique([userId, sku]) // SKU is unique for a specific user
  @@index([userId]) // Index for user lookup
  @@index([categoryId])
  @@map("products")
}

model Category {
  id        String   @id @default(cuid())
  name      String // Category name - Made unique *per user* below
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  userId   String // <<<< CORRECTED: Just the scalar foreign key type
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade) // <<<< CORRECTED: @relation is here
  products Product[]

  @@unique([userId, name]) // Category name is unique for a specific user
  @@index([userId]) // Index for user lookup
  @@map("categories")
}

model Sale {
  id          String   @id @default(cuid())
  saleDate    DateTime @default(now())
  totalAmount Decimal  @db.Decimal(12, 2)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  userId String // Foreign key to the User who made the sale
  user   User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items  SaleItem[] // List of items in this sale

  @@index([userId])
  @@map("sales")
}

model SaleItem {
  id          String   @id @default(cuid())
  quantity    Int
  priceAtSale Decimal  @db.Decimal(10, 2)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  saleId    String // Foreign key to the Sale
  sale      Sale    @relation(fields: [saleId], references: [id], onDelete: Cascade)
  productId String // Foreign key to the Product sold
  product   Product @relation(fields: [productId], references: [id])

  @@index([saleId])
  @@index([productId])
  @@map("sale_items")
}

model Purchase {
  id           String   @id @default(cuid())
  purchaseDate DateTime @default(now())
  totalAmount  Decimal  @db.Decimal(12, 2)
  invoiceRef   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relationships
  userId     String // Foreign key to the User who recorded the purchase
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  items      PurchaseItem[] // List of items in this purchase
  supplierId String? // Foreign key for optional supplier
  supplier   Supplier?      @relation(fields: [supplierId], references: [id])

  @@index([userId])
  @@index([supplierId])
  @@map("purchases")
}

model PurchaseItem {
  id             String   @id @default(cuid())
  quantity       Int
  costAtPurchase Decimal  @db.Decimal(10, 2)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relationships
  purchaseId String // Foreign key to the Purchase
  purchase   Purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
  productId  String // Foreign key to the Product purchased
  product    Product  @relation(fields: [productId], references: [id])

  @@index([purchaseId])
  @@index([productId])
  @@map("purchase_items")
}

model Supplier {
  id          String   @id @default(cuid())
  name        String
  contactName String?
  email       String? // Made unique *per user* below
  phone       String?
  address     String?
  notes       String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  userId    String // <<<< CORRECTED: Just the scalar foreign key type
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade) // <<<< CORRECTED: @relation is here
  purchases Purchase[]

  @@unique([userId, email]) // Supplier email is unique for a specific user (if not null)
  @@index([userId]) // Index for user lookup
  @@map("suppliers")
}

model Customer {
  id          String   @id @default(cuid())
  name        String
  contactName String?
  email       String? // Made unique *per user* below
  phone       String?
  address     String?
  notes       String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, email]) // Customer email is unique for a specific user (if not null)
  @@index([userId]) // Index for user lookup
  @@map("customers")
}
